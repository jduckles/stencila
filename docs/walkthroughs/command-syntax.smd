---
title: Stencila Markdown AI Commands Syntax
description: Syntax for writing AI Commands in Stencila Markdown
---

# Overview 

This walkthrough provides an introduction to Stencila's Markdown syntax extensions for generative AI commands. If you have not already, create a [Stencila Cloud](https://stencila.cloud) account so you have access to AI models for this walkthrough on our free tier.

> [!tip]
> This walkthrough is interactive: you can perform actions in the document, including adding or modify content. However, you must write any new content before the last set of ellipses `...` in the document. Any content added after this will be ignored.

## Capabilities

AI commands within a document enable you to instruct LLMs in a way that draws on the document's context. You can do things like: 

* Ask the LLM to generate a diagram based on the above paragraph of text
* Generate LLM prose that describes a block of Python or R code
* Have the LLM edit a paragraph for readability or clarity
* Create a plot based on the data file you imported in a previous section

Stencila is built on a rich document schema, and prompts draw on this schema to provide appropriate context to the LLM, thus improving the quality of generated content from the LLM. 

Also, a prompt is itself a rich Stencila document, which can be user edited and tuned to build prompts which make specific tasks in technical and scientific writing more streamlined.

## Responsible AI usage

Stencila's approach also keeps track of provenance of your document. This creates a record of what parts are generated by LLMs, which prompts were used, and which models generated each response. It also allows for authors to explicitly "verify" generated content as being correct.

...

# Introduction

Stencila Markdown is a flavor of Markdown with extensions for scientific and technical writing. It uses "colon fences" for most of its extensions, including for AI commands.

Colon fences are any line starting with three or more colons (i.e. `:::`). Colon fences by default, but as described below, not always, exist as a pair of opening and closing fences.

The opening fence always has a keyword following the colons; the closing fence does not. The keyword for AI commands describes the type of command (e.g. `create`, `edit`).

For example, here is a command to edit and improve the grammar of two short paragraphs:

```markdown
::: edit expand and improve grammar

First paragraph.

Second paragraph.

:::
```

Which would result in the LLM providing something like: 

> The first paragraph of a document often serves as the introduction and sets the stage for the rest of the content. It is essential to clearly introduce the topic or purpose to engage readers from the beginning.

> The second paragraph typically builds on the introduction, providing more details or context. This might involve extending the discussion, presenting key arguments, or elaborating on important points to guide the reader through the material effectively.

...

# Commands 

There are four main commands in Stencila that can be used in a document to call LLM prompts.

- `::: create` - used to create new blocks or content, it can be used to create figures, code blocks, new prose sections etc. 
- `::: edit` - a command that can be wrapped around an existing block or section, asking the LLM to make some modifications of the enclosed content.
- `::: describe` - is used to ask the LLM for a description of a section or block. 
- `::: fix` - fix is used to make targeted changes or fix errors in code from a previous `::: create` or even your own code blocks with errors. 

...

# Shorthands

Always having to write paired colon fences can be tedious so Stencila Markdown provides two shorthand forms: one for commands that do not enclose any content or have any suggestions yet (e.g. a new `create` command), and one for commands that enclose a single block of content (e.g. most `edit` and `fix` commands) or a single block in the active suggestion.

...

## Commands with no content or suggestions

The `create` command is used to generate new content to insert into the document. As such, it starts off empty, without any enclosing content and no suggestions.

Rather than having to write three new lines for a `create` command e.g.

```markdown
::: create plot of height versus width

:::
```

Stencila allows you to write a "self closing" opening fence by adding `:::` to the end of the line e.g.

```markdown
::: create plot of height versus width :::
```

Try, typing out your own `create` command here in the walkthrough: 

...

## Commands with only a single block in their target content or active suggestion

The `edit` and `fix` commands usually only have one block as a target (e.g. a command to edit a paragraph, or fix a code cell). Also, `create` commands are usually for a single block (e.g a command to create a new figure) and so their suggestions only have one block.

Rather than having to put a closing fence after a single block e.g.

```markdown
::: edit expand to 20-30 words

The cat sat on

:::
```

Stencila uses a "next block only" shorthand, by adding `>>>` to the end of the opening fence when there is only one block in the target content or active suggestion of a command e.g.

```markdown
::: edit expand to 20-30 words >>>

The cat sat on
```

Here is an example of a `create` block, which has already been run and has a single suggestion:

````markdown
::: create code to print hello world >>>

```python exec
print("Hello world")
```
````

...

## Reformatting and shorthands

The shorthand forms are optional - you can use a pair of colon fences if you prefer. However, when you reformat a document (for example using `Ctrl+Shift+I` is VSCode), or when Stencila reformats it when inserting new content, these shorthand forms will be used where possible. This is done to avoid cluttering the document too much with colon fences.

...

# Verifying output 

Output from LLM commands in Stencila have a flow whereby the user can review generated content and verify it. You'll see that after you run any of the Stencila AI commands, the block that is produced with have a `Verify` code lens added to it. 

It is up to the user to read through this output and verify it, then click "Verify". This adds metadata and provenance to the document with the prompt, model used, and the user who verified the section. 

Additionally after an operation like `::: create` you can leave the document in a final form by clicking `Accept` in the code lens by the `::: create` line. This act of "Accepting", removes the prompt text from the document, saves it in the sidecar (if enabled) and leaves the document clean going forward. 
