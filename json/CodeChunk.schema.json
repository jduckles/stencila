{
  "$schema": "https://stencila.dev/meta.schema.json",
  "$id": "https://stencila.dev/CodeChunk.schema.json",
  "@id": "stencila:CodeChunk",
  "title": "CodeChunk",
  "extends": [
    "CodeExecutable"
  ],
  "category": "code",
  "description": "A executable chunk of code.",
  "proptest": {},
  "jats": {
    "elem": "code",
    "attrs": {
      "executable": "yes"
    }
  },
  "markdown": {
    "special": true
  },
  "required": [
    "type",
    "code"
  ],
  "core": [
    "id",
    "autoExec",
    "programmingLanguage",
    "outputs"
  ],
  "properties": {
    "type": {
      "@id": "schema:type",
      "description": "The type of this item.",
      "$comment": "This is a special property analogous to JSON-LD's `@type` keyword.\n",
      "type": "string"
    },
    "id": {
      "@id": "schema:id",
      "description": "The identifier for this item.",
      "$comment": "This is a special property analogous to JSON-LD's `@id` keyword.\n",
      "strip": [
        "metadata"
      ],
      "html": {
        "attr": "id"
      },
      "type": "string"
    },
    "autoExec": {
      "@id": "stencila:autoExec",
      "description": "Under which circumstances the code should be automatically executed.",
      "aliases": [
        "auto",
        "auto-exec",
        "auto_exec"
      ],
      "strip": [
        "execution"
      ],
      "$ref": "AutomaticExecution.schema.json"
    },
    "compilationDigest": {
      "@id": "stencila:compilationDigest",
      "description": "A digest of the content, semantics and dependencies of the node.",
      "aliases": [
        "compilation-digest",
        "compilation_digest"
      ],
      "strip": [
        "execution"
      ],
      "$ref": "ExecutionDigest.schema.json"
    },
    "executionDigest": {
      "@id": "stencila:executionDigest",
      "description": "The `compileDigest` of the node when it was last executed.",
      "aliases": [
        "execution-digest",
        "execution_digest"
      ],
      "strip": [
        "execution"
      ],
      "$ref": "ExecutionDigest.schema.json"
    },
    "executionDependencies": {
      "@id": "stencila:executionDependencies",
      "description": "The upstream dependencies of this node.",
      "aliases": [
        "execution-dependencies",
        "execution_dependencies",
        "executionDependency",
        "execution-dependency",
        "execution_dependency"
      ],
      "strip": [
        "execution"
      ],
      "type": "array",
      "items": {
        "$ref": "ExecutionDependency.schema.json"
      }
    },
    "executionDependants": {
      "@id": "stencila:executionDependants",
      "description": "The downstream dependants of this node.",
      "aliases": [
        "execution-dependants",
        "execution_dependants",
        "executionDependant",
        "execution-dependant",
        "execution_dependant"
      ],
      "strip": [
        "execution"
      ],
      "type": "array",
      "items": {
        "$ref": "ExecutionDependant.schema.json"
      }
    },
    "executionTags": {
      "@id": "stencila:executionTags",
      "description": "Tags in the code which affect its execution.",
      "aliases": [
        "execution-tags",
        "execution_tags",
        "executionTag",
        "execution-tag",
        "execution_tag"
      ],
      "strip": [
        "execution"
      ],
      "type": "array",
      "items": {
        "$ref": "ExecutionTag.schema.json"
      }
    },
    "executionCount": {
      "@id": "stencila:executionCount",
      "description": "A count of the number of times that the node has been executed.",
      "$comment": "Intended to increment with each successive execution of the node, including across sessions.\nNote that this differs to the `execution_count` in Jupyter Notebook format which is\nthe \"code cell's prompt number\" and which resets at the start of each new session.\n",
      "aliases": [
        "execution-count",
        "execution_count"
      ],
      "strip": [
        "execution"
      ],
      "type": "integer",
      "minimum": 0.0
    },
    "executionRequired": {
      "@id": "stencila:executionRequired",
      "description": "Whether, and why, the code requires execution or re-execution.",
      "aliases": [
        "execution-required",
        "execution_required"
      ],
      "strip": [
        "execution"
      ],
      "$ref": "ExecutionRequired.schema.json"
    },
    "executionKernel": {
      "@id": "stencila:executionKernel",
      "description": "The id of the kernel that the node was last executed in.",
      "aliases": [
        "execution-kernel",
        "execution_kernel"
      ],
      "strip": [
        "execution"
      ],
      "type": "string"
    },
    "executionStatus": {
      "@id": "stencila:executionStatus",
      "description": "Status of the most recent, including any current, execution.",
      "aliases": [
        "execution-status",
        "execution_status"
      ],
      "strip": [
        "execution"
      ],
      "$ref": "ExecutionStatus.schema.json"
    },
    "executionEnded": {
      "@id": "stencila:executionEnded",
      "description": "The timestamp when the last execution ended.",
      "aliases": [
        "execution-ended",
        "execution_ended"
      ],
      "strip": [
        "execution"
      ],
      "$ref": "Timestamp.schema.json"
    },
    "executionDuration": {
      "@id": "stencila:executionDuration",
      "description": "Duration of the last execution.",
      "aliases": [
        "execution-duration",
        "execution_duration"
      ],
      "strip": [
        "execution"
      ],
      "$ref": "Duration.schema.json"
    },
    "errors": {
      "@id": "stencila:errors",
      "description": "Errors when compiling (e.g. syntax errors) or executing the node.",
      "aliases": [
        "error"
      ],
      "strip": [
        "execution"
      ],
      "type": "array",
      "items": {
        "$ref": "CodeError.schema.json"
      }
    },
    "code": {
      "@id": "stencila:code",
      "description": "The code.",
      "strip": [
        "code"
      ],
      "proptest": {
        "min": {
          "description": "Generate a simple fixed string of code.",
          "value": "Cord::new(\"code\")"
        },
        "low": {
          "description": "Generate a random string of up to 10 alphanumeric & whitespace characters.",
          "strategy": "r\"[a-zA-Z0-9 \\t\\n]{1,10}\".prop_map(Cord::new)"
        },
        "high": {
          "description": "Generate a random string of up to 100 characters (excluding control characters).\n",
          "strategy": "r\"[^\\p{C}]{1,100}\".prop_map(Cord::new)"
        },
        "max": {
          "description": "Generate an arbitrary string.",
          "strategy": "String::arbitrary().prop_map(Cord::new)"
        }
      },
      "jats": {
        "content": true
      },
      "$ref": "Cord.schema.json"
    },
    "programmingLanguage": {
      "@id": "schema:programmingLanguage",
      "description": "The programming language of the code.",
      "aliases": [
        "programming-language",
        "programming_language"
      ],
      "strip": [
        "code"
      ],
      "proptest": {
        "min": {
          "description": "Generate a simple fixed string.",
          "value": "Some(String::from(\"lang\"))"
        },
        "low": {
          "description": "Generate one of the well known programming language short names.",
          "strategy": "option::of(r\"(cpp)|(js)|(py)|(r)|(ts)\")"
        },
        "high": {
          "description": "Generate a random string of up to 10 alphanumeric characters.",
          "strategy": "option::of(r\"[a-zA-Z0-9]{1,10}\")"
        },
        "max": {
          "description": "Generate an arbitrary string.",
          "strategy": "option::of(String::arbitrary())"
        }
      },
      "jats": {
        "attr": "language"
      },
      "type": "string"
    },
    "executionPure": {
      "@id": "stencila:executionPure",
      "description": "Whether the code should be treated as side-effect free when executed.",
      "aliases": [
        "execution-pure",
        "execution_pure"
      ],
      "strip": [
        "execution"
      ],
      "type": "boolean"
    },
    "outputs": {
      "@id": "stencila:outputs",
      "description": "Outputs from executing the chunk.",
      "aliases": [
        "output"
      ],
      "strip": [
        "output"
      ],
      "type": "array",
      "items": {
        "$ref": "Node.schema.json"
      }
    },
    "label": {
      "@id": "stencila:label",
      "description": "A short label for the CodeChunk.",
      "type": "string"
    },
    "caption": {
      "@id": "schema:caption",
      "description": "A caption for the CodeChunk.",
      "$comment": "An array of nodes or, to be compatible with https://schema.org/caption, a string.\n",
      "type": "array",
      "items": {
        "$ref": "Block.schema.json"
      }
    }
  }
}