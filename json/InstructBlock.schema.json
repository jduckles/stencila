{
  "$schema": "https://stencila.org/meta.schema.json",
  "$id": "https://stencila.org/InstructBlock.schema.json",
  "@id": "stencila:InstructBlock",
  "title": "InstructBlock",
  "extends": [
    "Instruct"
  ],
  "category": "edits",
  "description": "An instruction to edit some block content.",
  "proptest": {},
  "markdown": {
    "special": true
  },
  "required": [
    "type",
    "text"
  ],
  "core": [
    "id",
    "agent",
    "executionStatus",
    "content"
  ],
  "properties": {
    "type": {
      "@id": "schema:type",
      "description": "The type of this item.",
      "$comment": "This is a special property analogous to JSON-LD's `@type` keyword.\n",
      "type": "string"
    },
    "id": {
      "@id": "schema:id",
      "description": "The identifier for this item.",
      "$comment": "This is a special property analogous to JSON-LD's `@id` keyword.\n",
      "strip": [
        "metadata"
      ],
      "html": {
        "attr": "id"
      },
      "type": "string"
    },
    "text": {
      "@id": "schema:text",
      "description": "The text of the instruction.",
      "type": "string"
    },
    "agent": {
      "@id": "schema:agent",
      "description": "The agent that executed the instruction.",
      "anyOf": [
        {
          "$ref": "Person.schema.json"
        },
        {
          "$ref": "Organization.schema.json"
        },
        {
          "$ref": "SoftwareApplication.schema.json"
        }
      ]
    },
    "executionStatus": {
      "@id": "stencila:executionStatus",
      "description": "Status of the execution of the instruction.",
      "aliases": [
        "execution-status",
        "execution_status"
      ],
      "$ref": "ExecutionStatus.schema.json"
    },
    "content": {
      "@id": "stencila:content",
      "description": "The content to which the instruction applies.",
      "proptest": {
        "min": {
          "description": "No content",
          "value": "None"
        },
        "low": {
          "description": "Generate a single arbitrary, non-recursive, block node",
          "strategy": "option::of(vec_blocks_non_recursive(1))"
        },
        "high": {
          "description": "Generate up to two arbitrary, non-recursive, block nodes",
          "strategy": "option::of(vec_blocks_non_recursive(2))"
        },
        "max": {
          "description": "Generate up to four arbitrary, non-recursive, block nodes",
          "strategy": "option::of(vec_blocks_non_recursive(4))"
        }
      },
      "type": "array",
      "items": {
        "$ref": "Block.schema.json"
      }
    }
  }
}