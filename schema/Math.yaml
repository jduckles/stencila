title: Math
'@id': stencila:Math
extends: Entity
category: math
abstract: true
description: Abstract base type for a mathematical variable or equation.
$comment: |
  This is a base type for `MathFragment` and `MathBlock` and should not
  normally be instantiated.
  This type has a similar structure and purpose to `CodeStatic` which is a base type
  for `CodeFragment`, `CodeBlock` etc.
required:
  - code
core:
  - mathLanguage
  - compileDigest
  - compileErrors
  - mathml
properties:
  code:
    '@id': stencila:code
    description: The code of the equation in the `mathLanguage`.
    $ref: Cord
    strip: [code]
    proptest:
      min:
        description: Generate a simple fixed string of math.
        value: Cord::new("math")
      low:
        description: Generate a random string of up to 10 alphanumeric & space characters.
        strategy: r"[a-zA-Z0-9 \t]{1,10}".prop_map(Cord::new)
      high:
        description: |
          Generate a random string of up to 100 characters (excluding control characters).
        strategy: r"[^\p{C}]{1,100}".prop_map(Cord::new)
      max:
        description: Generate an arbitrary string.
        strategy: String::arbitrary().prop_map(Cord::new)
  mathLanguage:
    '@id': stencila:mathLanguage
    description: The language used for the equation e.g tex, mathml, asciimath.
    $comment: Where necessary, the language is assumed to be TeX.
    type: string
    strip: [code]
    proptest:
      min:
        description: No language.
        value: None
      low:
        description: Generate one of the math language names.
        strategy: option::of(r"(asciimath)|(mathml)|(tex)")
      high:
        description: Generate a random string of up to 10 alphanumeric characters.
        strategy: option::of(r"[a-zA-Z0-9]{1,10}")
      max:
        description: Generate an arbitrary string.
        strategy: option::of(String::arbitrary())
  compileDigest:
    '@id': stencila:compileDigest
    description: A digest of the `code` and `mathLanguage`.
    $comment: Used to avoid unnecessary transpilation to MathML.
    $ref: ExecutionDigest
    strip: [execution]
  compileErrors:
    '@id': stencila:compileErrors
    description: Errors that occurred when parsing and compiling the math equation.
    $comment: |
      This property is an array of strings. Compare this to `CodeChunk.errors`
      which is an array of `CodeError` nodes. Strings are considered to
      be sufficient for math parsing errors which usually won't have stack traces,
      line numbers etc.
    type: array
    items:
      type: string
    strip: [execution]
  mathml:
    '@id': stencila:mathml
    description: The MathML transpiled from the `code`.
    $comment: Used along with `compileDigest` to avoid unnecessary transpilation to MathML.
    html:
      content: true
    type: string
    strip: [output]
